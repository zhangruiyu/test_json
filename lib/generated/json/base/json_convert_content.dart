// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:test_json/bbcc_entity.dart';
import 'package:test_json/city_entity.dart';
import 'package:test_json/diagnosis_record_entity.dart';
import 'package:test_json/h_entity.dart';
import 'package:test_json/he_entity.dart';
import 'package:test_json/local_collection_voice.dart';
import 'package:test_json/pp_entity.dart';
import 'package:test_json/test_entity.dart';
import 'package:test_json/tttt_entity.dart';
import 'package:test_json/yy_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
  static Map<String, JsonConvertFunction> get convertFuncMap =>
      {
        (BbccEntity).toString(): BbccEntity.fromJson,
        (BbccGlossary).toString(): BbccGlossary.fromJson,
        (BbccGlossaryGlossDiv).toString(): BbccGlossaryGlossDiv.fromJson,
        (BbccGlossaryGlossDivGlossList)
            .toString(): BbccGlossaryGlossDivGlossList.fromJson,
        (BbccGlossaryGlossDivGlossListGlossEntry)
            .toString(): BbccGlossaryGlossDivGlossListGlossEntry.fromJson,
        (BbccGlossaryGlossDivGlossListGlossEntryGlossDef)
            .toString(): BbccGlossaryGlossDivGlossListGlossEntryGlossDef
            .fromJson,
        (CityEntity).toString(): CityEntity.fromJson,
        (CitySites).toString(): CitySites.fromJson,
        (CitySitesLang).toString(): CitySitesLang.fromJson,
        (CitySitesAddress).toString(): CitySitesAddress.fromJson,
        (DiagnosisRecordEntity).toString(): DiagnosisRecordEntity.fromJson,
        (DiagnosisRecordConsultation).toString(): DiagnosisRecordConsultation
            .fromJson,
        (DiagnosisRecordMessage).toString(): DiagnosisRecordMessage.fromJson,
        (DiagnosisRecordDoctor).toString(): DiagnosisRecordDoctor.fromJson,
        (HEntity).toString(): HEntity.fromJson,
        (HGlossary).toString(): HGlossary.fromJson,
        (HGlossaryGlossDiv).toString(): HGlossaryGlossDiv.fromJson,
        (HGlossaryGlossDivGlossList).toString(): HGlossaryGlossDivGlossList
            .fromJson,
        (HGlossaryGlossDivGlossListGlossEntry)
            .toString(): HGlossaryGlossDivGlossListGlossEntry.fromJson,
        (HGlossaryGlossDivGlossListGlossEntryGlossDef)
            .toString(): HGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson,
        (HeEntity).toString(): HeEntity.fromJson,
        (HeGlossary).toString(): HeGlossary.fromJson,
        (HeGlossaryGlossDiv).toString(): HeGlossaryGlossDiv.fromJson,
        (HeGlossaryGlossDivGlossList).toString(): HeGlossaryGlossDivGlossList
            .fromJson,
        (HeGlossaryGlossDivGlossListGlossEntry)
            .toString(): HeGlossaryGlossDivGlossListGlossEntry.fromJson,
        (HeGlossaryGlossDivGlossListGlossEntryGlossDef)
            .toString(): HeGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson,
        (LocalCollectionVoice).toString(): LocalCollectionVoice.fromJson,
        (PpEntity).toString(): PpEntity.fromJson,
        (PpSites).toString(): PpSites.fromJson,
        (PpSitesLang).toString(): PpSitesLang.fromJson,
        (PpSitesAddress).toString(): PpSitesAddress.fromJson,
        (TestEntity).toString(): TestEntity.fromJson,
        (TestGlossary).toString(): TestGlossary.fromJson,
        (TestGlossaryGlossDiv).toString(): TestGlossaryGlossDiv.fromJson,
        (TestGlossaryGlossDivGlossList)
            .toString(): TestGlossaryGlossDivGlossList.fromJson,
        (TestGlossaryGlossDivGlossListGlossEntry)
            .toString(): TestGlossaryGlossDivGlossListGlossEntry.fromJson,
        (TestGlossaryGlossDivGlossListGlossEntryGlossDef)
            .toString(): TestGlossaryGlossDivGlossListGlossEntryGlossDef
            .fromJson,
        (TtttEntity).toString(): TtttEntity.fromJson,
        (TtttGlossary).toString(): TtttGlossary.fromJson,
        (TtttGlossaryGlossDiv).toString(): TtttGlossaryGlossDiv.fromJson,
        (TtttGlossaryGlossDivGlossList)
            .toString(): TtttGlossaryGlossDivGlossList.fromJson,
        (TtttGlossaryGlossDivGlossListGlossEntry)
            .toString(): TtttGlossaryGlossDivGlossListGlossEntry.fromJson,
        (TtttGlossaryGlossDivGlossListGlossEntryGlossDef)
            .toString(): TtttGlossaryGlossDivGlossListGlossEntryGlossDef
            .fromJson,
        (YyEntity).toString(): YyEntity.fromJson,
        (YyGlossary).toString(): YyGlossary.fromJson,
        (YyGlossaryGlossDiv).toString(): YyGlossaryGlossDiv.fromJson,
        (YyGlossaryGlossDivGlossList).toString(): YyGlossaryGlossDivGlossList
            .fromJson,
        (YyGlossaryGlossDivGlossListGlossEntry)
            .toString(): YyGlossaryGlossDivGlossListGlossEntry.fromJson,
        (YyGlossaryGlossDivGlossListGlossEntryGlossDef)
            .toString(): YyGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson,
      };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<BbccEntity>[] is M) {
      return data.map<BbccEntity>((Map<String, dynamic> e) =>
          BbccEntity.fromJson(e)).toList() as M;
    }
    if (<BbccGlossary>[] is M) {
      return data.map<BbccGlossary>((Map<String, dynamic> e) =>
          BbccGlossary.fromJson(e)).toList() as M;
    }
    if (<BbccGlossaryGlossDiv>[] is M) {
      return data.map<BbccGlossaryGlossDiv>((Map<String, dynamic> e) =>
          BbccGlossaryGlossDiv.fromJson(e)).toList() as M;
    }
    if (<BbccGlossaryGlossDivGlossList>[] is M) {
      return data.map<BbccGlossaryGlossDivGlossList>((Map<String, dynamic> e) =>
          BbccGlossaryGlossDivGlossList.fromJson(e)).toList() as M;
    }
    if (<BbccGlossaryGlossDivGlossListGlossEntry>[] is M) {
      return data.map<BbccGlossaryGlossDivGlossListGlossEntry>((
          Map<String, dynamic> e) =>
          BbccGlossaryGlossDivGlossListGlossEntry.fromJson(e)).toList() as M;
    }
    if (<BbccGlossaryGlossDivGlossListGlossEntryGlossDef>[] is M) {
      return data.map<BbccGlossaryGlossDivGlossListGlossEntryGlossDef>((
          Map<String, dynamic> e) =>
          BbccGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson(e))
          .toList() as M;
    }
    if (<CityEntity>[] is M) {
      return data.map<CityEntity>((Map<String, dynamic> e) =>
          CityEntity.fromJson(e)).toList() as M;
    }
    if (<CitySites>[] is M) {
      return data.map<CitySites>((Map<String, dynamic> e) =>
          CitySites.fromJson(e)).toList() as M;
    }
    if (<CitySitesLang>[] is M) {
      return data.map<CitySitesLang>((Map<String, dynamic> e) =>
          CitySitesLang.fromJson(e)).toList() as M;
    }
    if (<CitySitesAddress>[] is M) {
      return data.map<CitySitesAddress>((Map<String, dynamic> e) =>
          CitySitesAddress.fromJson(e)).toList() as M;
    }
    if (<DiagnosisRecordEntity>[] is M) {
      return data.map<DiagnosisRecordEntity>((Map<String, dynamic> e) =>
          DiagnosisRecordEntity.fromJson(e)).toList() as M;
    }
    if (<DiagnosisRecordConsultation>[] is M) {
      return data.map<DiagnosisRecordConsultation>((Map<String, dynamic> e) =>
          DiagnosisRecordConsultation.fromJson(e)).toList() as M;
    }
    if (<DiagnosisRecordMessage>[] is M) {
      return data.map<DiagnosisRecordMessage>((Map<String, dynamic> e) =>
          DiagnosisRecordMessage.fromJson(e)).toList() as M;
    }
    if (<DiagnosisRecordDoctor>[] is M) {
      return data.map<DiagnosisRecordDoctor>((Map<String, dynamic> e) =>
          DiagnosisRecordDoctor.fromJson(e)).toList() as M;
    }
    if (<HEntity>[] is M) {
      return data.map<HEntity>((Map<String, dynamic> e) => HEntity.fromJson(e))
          .toList() as M;
    }
    if (<HGlossary>[] is M) {
      return data.map<HGlossary>((Map<String, dynamic> e) =>
          HGlossary.fromJson(e)).toList() as M;
    }
    if (<HGlossaryGlossDiv>[] is M) {
      return data.map<HGlossaryGlossDiv>((Map<String, dynamic> e) =>
          HGlossaryGlossDiv.fromJson(e)).toList() as M;
    }
    if (<HGlossaryGlossDivGlossList>[] is M) {
      return data.map<HGlossaryGlossDivGlossList>((Map<String, dynamic> e) =>
          HGlossaryGlossDivGlossList.fromJson(e)).toList() as M;
    }
    if (<HGlossaryGlossDivGlossListGlossEntry>[] is M) {
      return data.map<HGlossaryGlossDivGlossListGlossEntry>((
          Map<String, dynamic> e) =>
          HGlossaryGlossDivGlossListGlossEntry.fromJson(e)).toList() as M;
    }
    if (<HGlossaryGlossDivGlossListGlossEntryGlossDef>[] is M) {
      return data.map<HGlossaryGlossDivGlossListGlossEntryGlossDef>((
          Map<String, dynamic> e) =>
          HGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson(e))
          .toList() as M;
    }
    if (<HeEntity>[] is M) {
      return data.map<HeEntity>((Map<String, dynamic> e) =>
          HeEntity.fromJson(e)).toList() as M;
    }
    if (<HeGlossary>[] is M) {
      return data.map<HeGlossary>((Map<String, dynamic> e) =>
          HeGlossary.fromJson(e)).toList() as M;
    }
    if (<HeGlossaryGlossDiv>[] is M) {
      return data.map<HeGlossaryGlossDiv>((Map<String, dynamic> e) =>
          HeGlossaryGlossDiv.fromJson(e)).toList() as M;
    }
    if (<HeGlossaryGlossDivGlossList>[] is M) {
      return data.map<HeGlossaryGlossDivGlossList>((Map<String, dynamic> e) =>
          HeGlossaryGlossDivGlossList.fromJson(e)).toList() as M;
    }
    if (<HeGlossaryGlossDivGlossListGlossEntry>[] is M) {
      return data.map<HeGlossaryGlossDivGlossListGlossEntry>((
          Map<String, dynamic> e) =>
          HeGlossaryGlossDivGlossListGlossEntry.fromJson(e)).toList() as M;
    }
    if (<HeGlossaryGlossDivGlossListGlossEntryGlossDef>[] is M) {
      return data.map<HeGlossaryGlossDivGlossListGlossEntryGlossDef>((
          Map<String, dynamic> e) =>
          HeGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson(e))
          .toList() as M;
    }
    if (<LocalCollectionVoice>[] is M) {
      return data.map<LocalCollectionVoice>((Map<String, dynamic> e) =>
          LocalCollectionVoice.fromJson(e)).toList() as M;
    }
    if (<PpEntity>[] is M) {
      return data.map<PpEntity>((Map<String, dynamic> e) =>
          PpEntity.fromJson(e)).toList() as M;
    }
    if (<PpSites>[] is M) {
      return data.map<PpSites>((Map<String, dynamic> e) => PpSites.fromJson(e))
          .toList() as M;
    }
    if (<PpSitesLang>[] is M) {
      return data.map<PpSitesLang>((Map<String, dynamic> e) =>
          PpSitesLang.fromJson(e)).toList() as M;
    }
    if (<PpSitesAddress>[] is M) {
      return data.map<PpSitesAddress>((Map<String, dynamic> e) =>
          PpSitesAddress.fromJson(e)).toList() as M;
    }
    if (<TestEntity>[] is M) {
      return data.map<TestEntity>((Map<String, dynamic> e) =>
          TestEntity.fromJson(e)).toList() as M;
    }
    if (<TestGlossary>[] is M) {
      return data.map<TestGlossary>((Map<String, dynamic> e) =>
          TestGlossary.fromJson(e)).toList() as M;
    }
    if (<TestGlossaryGlossDiv>[] is M) {
      return data.map<TestGlossaryGlossDiv>((Map<String, dynamic> e) =>
          TestGlossaryGlossDiv.fromJson(e)).toList() as M;
    }
    if (<TestGlossaryGlossDivGlossList>[] is M) {
      return data.map<TestGlossaryGlossDivGlossList>((Map<String, dynamic> e) =>
          TestGlossaryGlossDivGlossList.fromJson(e)).toList() as M;
    }
    if (<TestGlossaryGlossDivGlossListGlossEntry>[] is M) {
      return data.map<TestGlossaryGlossDivGlossListGlossEntry>((
          Map<String, dynamic> e) =>
          TestGlossaryGlossDivGlossListGlossEntry.fromJson(e)).toList() as M;
    }
    if (<TestGlossaryGlossDivGlossListGlossEntryGlossDef>[] is M) {
      return data.map<TestGlossaryGlossDivGlossListGlossEntryGlossDef>((
          Map<String, dynamic> e) =>
          TestGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson(e))
          .toList() as M;
    }
    if (<TtttEntity>[] is M) {
      return data.map<TtttEntity>((Map<String, dynamic> e) =>
          TtttEntity.fromJson(e)).toList() as M;
    }
    if (<TtttGlossary>[] is M) {
      return data.map<TtttGlossary>((Map<String, dynamic> e) =>
          TtttGlossary.fromJson(e)).toList() as M;
    }
    if (<TtttGlossaryGlossDiv>[] is M) {
      return data.map<TtttGlossaryGlossDiv>((Map<String, dynamic> e) =>
          TtttGlossaryGlossDiv.fromJson(e)).toList() as M;
    }
    if (<TtttGlossaryGlossDivGlossList>[] is M) {
      return data.map<TtttGlossaryGlossDivGlossList>((Map<String, dynamic> e) =>
          TtttGlossaryGlossDivGlossList.fromJson(e)).toList() as M;
    }
    if (<TtttGlossaryGlossDivGlossListGlossEntry>[] is M) {
      return data.map<TtttGlossaryGlossDivGlossListGlossEntry>((
          Map<String, dynamic> e) =>
          TtttGlossaryGlossDivGlossListGlossEntry.fromJson(e)).toList() as M;
    }
    if (<TtttGlossaryGlossDivGlossListGlossEntryGlossDef>[] is M) {
      return data.map<TtttGlossaryGlossDivGlossListGlossEntryGlossDef>((
          Map<String, dynamic> e) =>
          TtttGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson(e))
          .toList() as M;
    }
    if (<YyEntity>[] is M) {
      return data.map<YyEntity>((Map<String, dynamic> e) =>
          YyEntity.fromJson(e)).toList() as M;
    }
    if (<YyGlossary>[] is M) {
      return data.map<YyGlossary>((Map<String, dynamic> e) =>
          YyGlossary.fromJson(e)).toList() as M;
    }
    if (<YyGlossaryGlossDiv>[] is M) {
      return data.map<YyGlossaryGlossDiv>((Map<String, dynamic> e) =>
          YyGlossaryGlossDiv.fromJson(e)).toList() as M;
    }
    if (<YyGlossaryGlossDivGlossList>[] is M) {
      return data.map<YyGlossaryGlossDivGlossList>((Map<String, dynamic> e) =>
          YyGlossaryGlossDivGlossList.fromJson(e)).toList() as M;
    }
    if (<YyGlossaryGlossDivGlossListGlossEntry>[] is M) {
      return data.map<YyGlossaryGlossDivGlossListGlossEntry>((
          Map<String, dynamic> e) =>
          YyGlossaryGlossDivGlossListGlossEntry.fromJson(e)).toList() as M;
    }
    if (<YyGlossaryGlossDivGlossListGlossEntryGlossDef>[] is M) {
      return data.map<YyGlossaryGlossDivGlossListGlossEntryGlossDef>((
          Map<String, dynamic> e) =>
          YyGlossaryGlossDivGlossListGlossEntryGlossDef.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}